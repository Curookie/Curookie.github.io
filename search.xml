<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[[스프링 부트] 1. 개발 환경의 변화와 자바]]></title>
    <url>%2F2018%2F07%2F09%2F2018-07-09-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-1-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD%EC%9D%98-%EB%B3%80%ED%99%94%EC%99%80-%EC%9E%90%EB%B0%94%2F</url>
    <content type="text"><![CDATA[이 내용은 &quot;윤석진&quot;님의 &quot;스프링 부트로 배우는 자바 웹 개발&quot; 책을 기반으로 참고하여 제 생각과 이해한 내용을 요약한 것임을 알려드립니다. [1.1] 인프라와 스프링 프레임워크의 변화 최근 웹 개발의 트랜드는 조립식이다. 오픈 소스들을 조합해서 서비스를 출시하는 경우가 많은데, 스프링 부트는 웹 개발을 쉽게 할 수 있게 돕는 툴인프라이다. 이를 시작하기 전에 자바 기술의 변화에 대해 알 필요가 있다. [1.1.1] 아키텍처의 변화 인터넷 시장의 트랜드 변화 인트라넷 -&gt; B2C 이 결과 인프라 아키텍처가 변화게되었다. Spring이 뜨고 Spring Boot가 생기고 1. 메인프레임 2. 서버/클라이언트 3. 웹 4. 클라우드 인터페이스 터미널 웹 브라우저/GUI 웹 서버 인스턴트 또는 컨테이너 주 언어 코볼, 포트란 델파이, C++, 펄 PHP, JSP, ASP 파이썬 목적 B2B B2C B2C B2C 플랫폼 지원 수준 단일접속, 순차 배치 처리 클라이언트 설치를 통한, 접속 지원 웹 서버에 의한 접속 처리, 별도의 데이터베이스 서버 활용 빈도수가 높아짐 물리 설치 없이 인스턴스 형태로, 자유롭게 확장 가능 [1.1.2] 스프링 프레임워크의 변화 초기에는 오라클 IBM과 같은 업체들이 제공하는 솔루션을 주로 사용했다. 서버: 웹로직, 웹스피어 개발API: EJBEnterprise JavaBean 사용 스프링은 EJB의 복잡하고 테스트하기도 어려우며 무거운 요소를 해결하기 위해 만들어졌다. 톰캣서버가 버전업, 스프링 프레임워크도 2.5버전 이후로 안정화되면서 스프링이 기반이 되고, 결정타로 전자정부 프레임워크에서도 기반 기술로 스프링 프레임워크를 채택하면서 스프링 프레임워크와 톰캣 조합이 표준이 되었다. 서버: 톰캣 개발 프레임워크: 스프링 프레임워크 최근에는 스타트업이 대거 등장, 빠르게 서비스를 런칭= 클라우드 사용 빈도가 증가. B2C 서비스의 경우 서버를 물리적으로 증설하지 않고 PaaS(Platform as a Service)로 서버를 물리적으로 증설하지 않고 인스턴스를 추가로 사용함에 따라 스프링은 위기에 빠져들었다. 스프링의 JDK, Tomcat설치 복잡한 빡치는 XML설정하는 일련의 작업들을 간소화해야하는 방법이 필요해졌다. 결국 스타트업들은 답답한 스프링을 견딜 수 없었고, 루비온레일스(RubyOnRails)나 장고(Django)를 이용해 빠르게 개발하는 것을 선호하게 되었다. 스프링 측은 이런 문제를 해결하기 위해 스프링 부트Spring Boot를 제작한다. 스프링 부트는 설정 자동화를 이용해서 MVC 모듈의 DispatcherServlet설정 JDBC DataSource 설정 등 웹 개발을 하는 데 필요한 인프라성 코드를 제공해 줌으로써 복잡한 XML 설정을 하지 않아도 개이득 개발을 시작할 수 있다. 또한, 임베디드 톰켓을 이용해 톰캣설치가 필요없고 main 메서드로 실행할 수 있다. 그리고 클라우드 환경에서도 별도의 작업 없이 스프링 부트를 이용하면 시간을 많이 단축할 수 있다. 서버: 임베디드 톰켓 개발 프레임워크: 스프링 부트 프레임워크 [1.2] 웹 애플리케이션 컨테이너 일반적으로 HTML과 같이 정적 파일들을 전달해 주는 역할을 하는 서버를 웹 서버라고 하고, PHP, JSP, ASP와 같은 언어들을 사용해서 동적인 페이지들을 생성 가능한 서버를 웹 애플리케이션 서버(Web Application Server), 자바 계열에서는 웹 애플리케이션 컨테이너(Web Application Container)라고 하며, 이는 웹 애플리케이션이 배포되는 공간을 뜻한다. Web Application Server/Container를 줄여서 WAS라고 부른다. WAS가 어떻게 웹 애플리케이션을 인식하고 동작시키는지 알기 위해서는 클래스 로더를 알아야한다. [1.2.1] 자바 개발을 위해 꼭 필요한 클래스 로더 자바의 가장 큰 특징 중 하나인 &quot;Write once, run anywhere&quot;한번 작성하면 플랫폼에 상관없이 쓸 수 있다.는 클래스 로더(Class Loader)가 있기에 가능하다. 자바 코드를 컴파일하면 JVM에서 실행가능한 상태가 된다. 클래스를 실행시키기 위해 클래스를 로딩하는 과정이 필요한데 그 과정을 수행해주는 녀석이 클래스 로더다. 클래스패스(Classpath)에 해당 모듈 또는 라이브러리를 추가하면 클래스파일 메타 정보 중 첫 번째 시작 필드를 이용해 클래스를 로딩한다. [1.2.1.1] 클래스 로더의 특징 구조가 계층적이다. 상위 클래스 로더에서 하위 클래스 로더를 갖는 방식이며, 최상위 클래스 로더는 부트스트랩 클래스 로더다. 클래스 로딩을 위임할 수 있다. 가시적인 규약이 있다. 클래스를 로딩할 떄 가능한 범위가 있다는 말이다. 부모 클래스 로더는 자식 클래스 로더가 로딩한 클래스를 알 수 없다. 클래스 언로딩 불가능. 클래스 로더로 로딩한 클래스들을 언로딩 할 수 없다. Garbage Collector가 동작하거나 WAS가 재시작할 때 초기화 된다. [1.2.1.2] 클래스 로더의 유형 클래스 로더에는 네 가지 유형이 있고 순차적으로 로드한다. 부트스트랩 클래스 로더(Bootstrap Class Loader) JVM 런타임 실행을 위해 기반이 되는 파일들을 로드한다. rt.tar 파일과 연관이 있다. 확장 클래스 로더(Extension Class Loader) 자바의 최상위 객체인 Object를 포함한 자바 API를 로드한다. ext 폴더 하위에 있는 jar 파일들과 연관있다. 시스템 클래스 로더(System Class Loader) 클래스패스에 포함된 클래스들을 로드한다. 사용자 정의 클래스 로더(User-defined Class Loader) 개발자가 만든 클래스 로더이다. 가장 마지막에 로드한다. [1.3] WAR 파일의 특성 배포시에 로컬 실행 프로그램은 jar로 패키징하고, 웹은 war(Web Application Resource)로 패키징한다. war는 압축 파일에 자바 관련 규약이 포함된 것이다. 바로 WEB-INF 폴더다. WAS는 war파일의 WEB-INF 폴더를 기준으로 클래스 파일들을 로드한다. war로 패키징하면 클래스 파일들은 WEB-INF 하위 classes 폴더에 저장된다. WEB-INF의 하위 libs 폴더에는 jar형식의 외부 라이브러리들이 있다. jar 라이브러리들은 사용자 정의 클래스 로더인, 웹 애플리케이션 컨테이너 로더를 통해 클래스패스에 추가된다. class 파일들은 웹 애플리케이션 클래스 로더를 통해 추가된다. WAS는 웹 애플리케이션 자체 API를 제공하기 위해 컨테이너를 로드하는 클래스 로더와 사용자가 추가한 JSP나 WAR 파일들을 다루기 위한 ServletContext Loader를 사용한다. 컨테이너가 시작되고 콘텍스트가 초기화되면 서블릿 스펙의 권장 사항에 따라 WEB-INF/classes 파일을 먼저 검색해서 로딩하고, 그 후에 WEB-INF/libs에 있는 jar파일들을 로드한다.]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>스프링 부트</tag>
        <tag>Spring Boot</tag>
        <tag>백엔드 개발</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[실용영어] 필수 구어체 5개 wanna gonna gotta kinda outta]]></title>
    <url>%2F2018%2F06%2F15%2F2018-06-15-%EC%8B%A4%EC%9A%A9%EC%98%81%EC%96%B4-%ED%95%84%EC%88%98-%EA%B5%AC%EC%96%B4%EC%B2%B4-5%EA%B0%9C-wanna-gonna-gotta-kinda-outta%2F</url>
    <content type="text"><![CDATA[오늘은 실제로 많이 쓰이지만회화, 영화, 드라마에 꼭 나온다 시험영어만 가르치는 우리나라에선 잘 언급되지 않는 구어체 5가지 표현을 알려드리려고 합니다. Wanna 워너 (= want to) 개요 want원하다 동사 뒤에는 to가 붙기 마련입니다. 생각해보세요, 원한다는 걸 말할 때 무조건 뭘 원하는지to 말하기 마련이잖아요.그리고 want to~을 원하다를 미국식으로 읽으면 t발음이 잘 안나면서 워너- 라고 읽을 수 있습니다. 모든 언어는 짧고 간단할 수록 좋습니다. 결국 이런식으로 쓰게 되는 데 한 단어로 표현 할 수 있으면 좋은거죠. 그래서 wanna가 탄생합니다.게다가 우린 이 wanna에 익숙합니다. 워너원(Wanna One) 덕분이죠중요한 건, 동사 같이 보이지만 동사+전치사 이기 때문에 주어+wanna+명사or 동사 이런 구조로 사용해야한다는 점이에요. ex) I wanna meet your friends 처음 사용한다면 wanna = want로 착각해서 wanna to ~ 이런 식의 실수를 하지 마세요. 의미 동사+전치사 ~을 원하다. 이렇게 써보세요 Let's Say ) I wanna get some rest. 난 좀 쉬고싶어 Let's Say ) Do you wanna go to Starbucks? 스타벅스 갈래? Let's Say ) What do you wanna eat? 넌 뭐 먹고 싶은데? Gonna 가너 (= going to) 개요 be going to~하려고 해라는 표현은 정말 많이 쓰는 표현인데요, 많이 쓸 수록 짧으면 좋겠죠?going(gon) + to(na) gonna 가너-가 만들어집니다.중요한 건, going이 동명사 라서 앞에 의미없는 be-동사를 붙여줘야합니다. I'm gonna read a book. 이런 식으로요 wanna처럼 to 뒤에 명사or 동사를 넣으면 됩니다.하지만, 언어를 쓰는 사람이 언어의 법입니다. gonna를 be going to로 쓰는 원어민도 종종 있다보니까 잘 못써도 이해 해줄겁니다.다음 구어체 gotta와 헤깔리지 마세요 의미 동명사+전치사 ~하려고 이렇게 써보세요 Let's Say ) I'm gonna study now. 난 이제 공부하려고 Let's Say ) What're we gonna do? 이제 어쩌게?/ 뭐하게? Let's Say ) We're not gonna take it. 우린 참지 않을거야 Gotta 가러(가터) (= have got to) 개요 get은 원어민들이 좋아하는 동사죠, 무엇인가를 얻으며 변화되는 이미지를 갖고있는데요, p.p의 모습을 띄고 있는 have gotp.p의 뜻이 아님는 have와 같은 뜻으로 사용됩니다. 즉, have got to는 have to입니다.회화나 채팅할 때는 should, must, have to 같은 표현을 사용하지 말고, gotta를 사용하는 연습을 해보세요.추가로, gotta는 맨 앞에 의문문으로 사용해 have you got a ~? 라는 의미로 가끔 쓰기도 한답니다. 의미 동사+전치사 ~해야 해 (=should, have to) 이렇게 써보세요 Let's Say ) I gotta go home today. 난 오늘 집에 가야해 Let's Say ) Gotta pencil? 연필 한개 있니? Let's Say ) You gotta be stronger. 넌 더 강해져야 돼 Kinda 카인더 (= kind of) 개요 kind of를 빨리 발음해보세요, 그럼 왜 kinda(카인더)가 됐는지 알겠죠?이 표현 역시 매우 많이 사용하는데, kind of라는 그 뜻 그대로 일종의 라는 전치사로 사용하거나,젊은 사람들 사이에서 우리가 자주 쓰는 그냥 좀~ 이런 투의 전치사로도 사용합니다.서로 다른 뜻이니 상황에 맞게 잘 사용해보세요~ 의미 전치사 좀(조금), 일종의(종류의) 이렇게 써보세요 Let's Say ) What kinda music do you like? 어떤 류의 음악 좋아하니? Let's Say ) I'm just kinda tired. 나 그냥 좀 힘들어 Let's Say ) It's kinda cool. 그거 좀 멋진데 Outta 아우러(아우타) (= out of) 개요 이것도 역시 out과 of를 빨리 발음하면 outta(미국-아우러/영국-아우타)발음이 됩니다.out of는 의미가 엄청 다양합니다. 그래서 많이 사용하겠죠? 1. out of [~] ~에서 벗어난ex) It's out of answer. 그건 답에서 벗어 났다. 2. out of [~] ~때문에ex) I took the job out of necessity because we had no money left. 우리는 남은 돈이 없었기에 난 직업을 필요성 때문에 갖었다. 3. [숫자A] out of [숫자B] B중에서 Aex) five out of seven people 7명 중에서 5명 4. out of [~] ~로 부터ex) Didn't you know that butter was made out of milk? 너 버터가 우유로부터 만들어진다는 거 몰랐니? 의미 전치사 ~에서 벗어난, ~때문에, B중에서 A, ~로 부터 이렇게 써보세요 Let's Say ) We'd better get outta here. 우리 여길 나가는게 좋겠어 Let's Say ) I was scared outta my mind. 난 내가 미칠까봐 두려웠어 Let's Say ) What is God want outta my life. 하나님이 내 삶에서 원하는게 무엇인가? 그 외 구어체 그 외에도.. 수 많은 구어체들이 있지만 위에 5개정도만 기억하세요, 아래는 영덕영어덕후이 되고싶은 분들만보세요. ain't (=am not, isn't, aren't, don't) hafta (=have to) donno (=don't know) gimme (=give me) lemme (=let me) musta (=must have) lotta (=a lot of)]]></content>
      <categories>
        <category>영어</category>
      </categories>
      <tags>
        <tag>구어체</tag>
        <tag>실용영어</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo와 GitHub Pages로 블로그 오픈]]></title>
    <url>%2F2018%2F05%2F28%2F2018-05-28-Hexo%EC%99%80-GitHub-Pages%EB%A1%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%98%A4%ED%94%88%2F</url>
    <content type="text"><![CDATA[Hexo헥소와 GitHub Pages깃허브 페이지로 블로그를 만들었습니다. 개인적으로 깃허브 페이지깃 허브 웹사이트는 리눅스의 마인드자유 소프트웨어, 오픈개발가 담겨 있다는 점이 가장 맘에 듭니다. 무료 호스팅, 도메인 제공 넘조아 프롤로그 깃 페이지Git Page로 블로그를 만든다는건 개발자들에게 특히 좋지만, 엄청난 응용커스터 마이징이 가능한 블로그이기에 제약받지 않는 자유로운 나만의 홈페이지를 만들고싶은 모든분들에게 적극 추천합니다! 게다가 Hexo라는 도구를 이용한다면 이런 강점을 갖을 수 있습니다. 최신기술웹 관련, 최적화엄청 가볍다 ㅎㅎ, SEO검색 잘 되게 하는 기술, 마크다운키보드 만으로 꾸밀 수 있음 블로그 소개 제 블로그에는 주로 개발자들을 위한 컨텐츠와 개인적인 포스팅을 할 예정입니다. 블로그 신념? 제 블로그 신념은 정보를 전달할 대상에게 이해하기 쉬운 글을 작성할 것입니다. 장황하고 횡설수설하는 글, 사전 같은 글보다는 필요한 정보를 쉽고 빠르게 이해할 수 있게 사족은 최대한 적게, 예시나 사진을 사용해서 포스팅할 계획입니다. 초등학생도 이해할 수 있을지도..? 제가 작성하는 포스트는 이해를 돕기 위해 포스팅 타겟에 따라 말투, 게시하는 스타일이 달라질 것입니다. 개인적인, 정리하는 공간으로서 사용할 것입니다. 개인 포토폴리오와 공부한 내용을 정리하는 목적의 포스팅도 올릴 계획입니다. Hexo + GitHub Pages의 특징 99% 자유로운 블로그 제작 가능! 한 마디로 표현해서 모든 것이 수정 가능하다 심지어 포스팅 날짜도 필요한 기능이 있다면 플러그인을 추가해 제작이 가능하다. 키보드 만으로 포스팅이 가능하다. 깃허브 블로그 답게 포스팅도 코딩같이 할 수 있다. MarkDown문법을 사용해 텍스트를 꾸미는 것 외에도, 복잡한 수식 또한 텍스트로 표현할 수 있다. 이렇게 $(ax^2 + bx + c = 0)$, $(a \ne 0)$ $$x = {-b \pm \sqrt{b^2-4ac} \over 2a}$$ 테마가 Jekyll보다 이쁘고, 테마를 개발하는 유저도 많다. 블로그 프레임워크로 유명한 3가지가 있다. Hexo - JS(nodeJS), Hugo - Go, Jekyll - Ruby 각자 사용 언어가 다르고 장, 단점이 있지만 포스트 원본 파일을 따로 관리할 수 있고Jekyll이라면 깃 허브에서 private아닌 이상(=매달 돈을 내지 않는 이상) 그대로 공개됨 테마가 확실히 좋다. 그리고 더 가벼움. 맨 처음엔 나도 Jekyll라는 툴을 사용 했지만, 내가 고른 테마가 너무 문제가 많아 Hexo로 갈아탔다. 웹 마스터가 아니기에 테마가 중요하고 이 때문에 스트레스 받고 싶지 않았다. Hexo와 GitHub Pages로 블로그 만드는 포스팅을 함 해드려겠다. :)]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>잡담</tag>
        <tag>Hexo</tag>
        <tag>GitHub Pages</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
</search>
